import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Link from "next/link";
import { FormEvent, useEffect, useState } from "react";
import { Button, Input } from "@chakra-ui/react";
import ChatBubble from "../components/Chat/ChatBubble";
import styled from "@emotion/styled";
import { dbService } from "../utils/fbase";
import { useRef } from "react";
import AppBar from "../components/AppBar";
import { useChatStore } from "../utils/store";
import Sheet from "react-modal-sheet";

enum ChatType {
  BOT = "bot",
  USER = "user",
  RESULT = "result",
}

const Home: NextPage = () => {
  const [input, setInput] = useState<string>("");
  const [isBottomOpen, setBottomOpen] = useState(false);
  const { chats, setChats } = useChatStore();
  const chatRef = useRef<HTMLDivElement | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    // set scroll to bottom.
    // chatRef.current &&
    if (chatRef.current)
      chatRef.current.scrollTop = chatRef.current.scrollHeight;
  }, [chats]);

  useEffect(() => {
    inputRef.current && inputRef.current.focus();
  }, []);

  const submitChat = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    setChats([
      ...chats,
      {
        type: ChatType.USER,
        text: input,
      },
      {
        type: ChatType.RESULT,
        text: "see now results",
      },
      {
        type: ChatType.BOT,
        text: "Response",
      },
    ]);
    setInput("");
  };

  const uploadDb = async () => {
    await dbService.collection("data").add({
      test: "eeew",
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppBar />

      <ChatContainer ref={chatRef}>
        {chats.map((item, index) => {
          switch (item.type) {
            case "user":
              return <ChatBubble key={index} text={item.text} />;
            case "bot":
              return (
                <ChatBubble key={index} text={item.text} type={item.type} />
              );
            case "result":
              return (
                <ChatBubble key={index} text={item.text} type={item.type} />
              );
            default:
              return <></>;
          }
        })}
        <Button onClick={() => setBottomOpen(true)}>Open sheet</Button>
        <Sheet isOpen={isBottomOpen} onClose={() => setBottomOpen(false)}>
          <Sheet.Container>
            <Sheet.Header />
            <Sheet.Content>
              <div>
                <Input />
                <Button width="90%" onClick={() => setBottomOpen(false)}>
                  Send
                </Button>
              </div>
            </Sheet.Content>
          </Sheet.Container>

          <Sheet.Backdrop />
        </Sheet>
        <form
          style={{ width: "100%" }}
          onSubmit={(e) => {
            submitChat(e);
          }}>
          <ChatInput
            ref={inputRef}
            mt={3}
            value={input}
            onChange={(e) => setInput(e.currentTarget.value)}
            placeholder="Type anything..."
          />
        </form>
      </ChatContainer>
    </>
  );
};

export default Home;

const ChatContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 12px;
  padding-bottom: 70px;
  overflow: scroll;
  max-height: 90vh;
`;

const ChatInput = styled(Input)`
  position: fixed;
  bottom: 20px;
  width: 380px;
  border-radius: 16px;
  box-shadow: 4px 4px 15px rgba(0, 0, 0, 0.1);
  padding: 25px 18px;
  border: 1.4px solid black;
  &:hover {
    border: 1.4px solid black;
  }
  &:focus {
    outline: none;
  }
  @media (max-width: 700px) {
    width: 90%;
  }
`;
