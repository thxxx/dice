import type { NextPage } from "next";
import Head from "next/head";
import { FormEvent, useEffect, useState } from "react";
import ChatBubble from "../../components/Chat/ChatBubble";
import styled from "@emotion/styled";
import { dbService } from "../../utils/fbase";
import { useRef } from "react";
import AppBar from "../../components/AppBar";
import { useChatStore } from "../../utils/store";
import { ChatInput, InputWrapper } from "..";
import { ArrowForwardIcon } from "@chakra-ui/icons";

export enum ChatType {
  BOT = "bot",
  USER = "user",
  RESULT = "result",
  LOADING = "loading",
}

const ChatPage: NextPage = () => {
  const [input, setInput] = useState<string>("");
  const { chats, setChats } = useChatStore();
  const chatRef = useRef<HTMLDivElement | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);
  const [loading, setLoading] = useState<boolean>(false);

  useEffect(() => {
    // set scroll to bottom.
    // chatRef.current &&
    if (chatRef.current)
      chatRef.current.scrollTop = chatRef.current.scrollHeight;
  }, [chats]);

  useEffect(() => {
    inputRef.current && inputRef.current.focus();
  }, []);

  const submitChat = () => {
    if (loading) return;

    let chatsCopied = [...chats];
    chatsCopied.push({
      type: ChatType.USER,
      text: input,
    });

    setChats([
      ...chatsCopied,
      {
        type: ChatType.BOT,
        text: "loading...",
      },
    ]);
    setLoading(true);

    const to = setTimeout(() => {
      chatsCopied.push(
        {
          type: ChatType.RESULT,
          text: "see now results",
        },
        {
          type: ChatType.BOT,
          text: "Response",
        }
      );
      setChats([...chatsCopied]);
      setLoading(false);

      clearTimeout(to);
    }, 5000);

    setInput("");
  };

  const uploadDb = async () => {
    await dbService.collection("data").add({
      test: "eeew",
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppBar />

      <ChatContainer ref={chatRef}>
        {chats.map((item, index) => {
          switch (item.type) {
            case "user":
              return <ChatBubble key={index} text={item.text} />;
            case "bot":
              return (
                <ChatBubble key={index} text={item.text} type={item.type} />
              );
            case "result":
              return (
                <ChatBubble key={index} text={item.text} type={item.type} />
              );
            default:
              return <></>;
          }
        })}

        <InputWrapperFixed
          onSubmit={(e: any) => {
            submitChat();
            e.preventDefault();
          }}>
          <ChatInput
            focusBorderColor="none"
            ref={inputRef}
            value={input}
            onChange={(e) => setInput(e.currentTarget.value)}
            placeholder="Type anything..."
          />
          <span className="icon" onClick={(e) => submitChat()}>
            <ArrowForwardIcon color="whiteAlpha.800" />
          </span>
          <div>Don{"'"}t know what to eat?</div>
        </InputWrapperFixed>
      </ChatContainer>
    </>
  );
};

export default ChatPage;

const InputWrapperFixed = styled(InputWrapper)`
  position: fixed;
  bottom: 20px;
  width: 900px;
  display: flex;
  flex-direction: column;
`;

const ChatContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 12px;
  padding-bottom: 70px;
  overflow: scroll;
  max-height: 90vh;
`;
