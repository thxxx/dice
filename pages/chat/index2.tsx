import type { NextPage } from "next";
import Head from "next/head";
import { FormEvent, useEffect, useState } from "react";
import ChatBubble from "../../components/Chat/ChatBubble";
import styled from "@emotion/styled";
import { useRef } from "react";
import AppBar from "../../components/AppBar";
import { useChatStore } from "../../utils/store";
import { ChatInput, InputWrapper } from "..";
import { ArrowForwardIcon } from "@chakra-ui/icons";
import router from "next/router";

export enum ChatType {
  BOT = "bot",
  USER = "user",
  RESULT = "result",
  LOADING = "loading",
}

const ChatPage: NextPage = () => {
  const [input, setInput] = useState<string>("");
  const [question, setQuestion] = useState<string>("");
  const [answer, setAnswer] = useState([]);
  const [key, setKey] = useState<string>("");
  const [dict, setDict] = useState({});
  const { chats, setChats } = useChatStore();
  const chatRef = useRef<HTMLDivElement | null>(null);
  const inputRef = useRef<HTMLInputElement | null>(null);
  const [loading, setLoading] = useState<boolean>(false);

  useEffect(() => {
    // set scroll to bottom.
    // chatRef.current &&
    if (chatRef.current)
      chatRef.current.scrollTop = chatRef.current.scrollHeight;
  }, [chats]);

  useEffect(() => {
    if (router.query.isFromHome) {
      router.replace("/chat", undefined, { shallow: true });
      submitChat(router.query.text as string);
    }
    inputRef.current && inputRef.current.focus();
  }, []);


  const handleClick = async (input: any) => {
    try {
      const response = await fetch('/api/hello',  {
        method: 'POST',
        body: JSON.stringify({
          "input": input
        }),
        headers: { 'Content-Type': 'application/json' }
      });
      const output = await response.json();
      console.log(output);

      setQuestion(output[0]);
      setAnswer(output[1]);
      setKey(output[2]);
      setDict(output[3]);

      const body = {
        question:output[0],
        answer:output[1],
        key:output[2],
        dict:output[3],
      }

      return body;
      
    } catch (error) {

    }

    setLoading(false);
  };

  const submitChat = async (text: string) => {
    if (loading) return;
    
    let output:any;

    if(text === 'yes' || text==='no'){
      let copiedDict:any = dict
      copiedDict[key] = text
      console.log("응답 : ", copiedDict)
      output = handleClick(copiedDict)
      return;
    }

    let chatsCopied = [...chats];

    chatsCopied.push({
      type: ChatType.USER,
      text: text,
    });

    setChats([
      ...chatsCopied,
      {
        type: ChatType.BOT,
        text: "loading...",
      },
    ]);
    setLoading(true);
    let input = {};
    
    output = await handleClick(input);
    
    const to = setTimeout(() => {
      chatsCopied.push(
        {
          type: ChatType.RESULT,
          text: "see now results",
        },
        {
          type: ChatType.BOT,
          text: output?.question,
        }
      );
      setChats([...chatsCopied]);
      setLoading(false);

      clearTimeout(to);
    }, 1000);

    setInput("");
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppBar />

      <ChatContainer ref={chatRef}>
        {chats.map((item, index) => {
          switch (item.type) {
            case "user":
              return <ChatBubble key={index} text={item.text} />;
            case "bot":
              return (
                <ChatBubble key={index} text={item.text} type={item.type} />
              );
            case "result":
              return (
                <ChatBubble key={index} text={item.text} type={item.type} />
              );
            default:
              return <></>;
          }
        })}

        <InputWrapperFixed
          onSubmit={(e: any) => {
            submitChat(input);
            e.preventDefault();
          }}>
          <ChatInput
            focusBorderColor="none"
            ref={inputRef}
            value={input}
            onChange={(e) => setInput(e.currentTarget.value)}
            placeholder="Type anything..."
          />
          <span className="icon" onClick={(e) => submitChat(input)}>
            <ArrowForwardIcon color="whiteAlpha.800" />
          </span>
          <div className="dontknow">
            Don{"'"}t know what to eat? <span>Let us Do!</span>
          </div>
        </InputWrapperFixed>
      </ChatContainer>
    </>
  );
};

export default ChatPage;

const InputWrapperFixed = styled(InputWrapper)`
  position: fixed;
  bottom: 20px;
  width: 900px;
  display: flex;
  flex-direction: column;
  .dontknow {
    padding: 4px;
    font-size: 15px;
    color: ${({ theme }) => theme.textColor02};
    span {
      font-weight: 600;
      color: ${({ theme }) => theme.purple03};
    }
  }
`;

const ChatContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 12px;
  padding-bottom: 100px;
  overflow: scroll;
  max-height: 90vh;
`;